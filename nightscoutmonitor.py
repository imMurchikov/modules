# meta developer: @mypchikov
# requires: matplotlib

from .. import loader, utils
import aiohttp
from datetime import datetime
import matplotlib.pyplot as plt
import os
import io

@loader.tds
class NightscoutMonitorMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ Nightscout"""

    strings = {"name": "NightscoutMonitor"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "nightscout_url",
                "https://your-nightscout.herokuapp.com",
                doc="URL Nightscout-—Å–µ—Ä–≤–µ—Ä–∞"
            ),
            loader.ConfigValue(
                "units",
                "mg/dL",  # –∏–ª–∏ mmol/L
                doc="–§–æ—Ä–º–∞—Ç –≥–ª—é–∫–æ–∑—ã: mg/dL –∏–ª–∏ mmol/L"
            ),
            loader.ConfigValue(
                "show_graph",
                True,
                doc="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≥–ª—é–∫–æ–∑—ã (True/False)"
            )
        )

    async def _fetch_data(self, count=1):
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.config['nightscout_url'].rstrip('/')}/api/v1/entries.json?count={count}") as resp:
                if resp.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status}")
                return await resp.json()

    def _convert_units(self, sgv):
        if self.config["units"].lower() == "mmol/l":
            return round(sgv / 18.0182, 1)
        return sgv

    def _format_units(self):
        return "mmol/L" if self.config["units"].lower() == "mmol/l" else "mg/dL"

    def _trend_emoji(self, direction):
        trends = {
            "DoubleUp": "‚¨ÜÔ∏è‚¨ÜÔ∏è",
            "SingleUp": "‚¨ÜÔ∏è",
            "FortyFiveUp": "‚ÜóÔ∏è",
            "Flat": "‚û°Ô∏è",
            "FortyFiveDown": "‚ÜòÔ∏è",
            "SingleDown": "‚¨áÔ∏è",
            "DoubleDown": "‚¨áÔ∏è‚¨áÔ∏è",
            "NOT COMPUTABLE": "‚ùì",
            "RATE OUT OF RANGE": "‚ö†Ô∏è"
        }
        return trends.get(direction, "‚ùî")

    def _draw_graph(self, entries):
        times = [datetime.fromtimestamp(e["date"] / 1000) for e in entries]
        values = [self._convert_units(e["sgv"]) for e in entries]

        plt.figure(figsize=(8, 4))
        ax = plt.gca()

        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        ax.plot(times, values, marker='o', linestyle='-', color='blue')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Y-–æ—Å–∏
        if self.config["units"].lower() == "mmol/l":
            ymin, ymax = 2.2, 22.2
            norm_low, norm_high = 4, 9
        else:
            ymin, ymax = 40, 400
            norm_low, norm_high = 70, 160

        ax.set_ylim(ymin, ymax)
        ax.set_ylabel(self._format_units())

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã
        ax.axhspan(norm_low, norm_high, facecolor='green', alpha=0.1)

        # –ü—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–æ—Ä–º—ã
        ax.axhline(norm_low, color='red', linestyle='--', linewidth=1)
        ax.axhline(norm_high, color='orange', linestyle='--', linewidth=1)

        ax.grid(True, which='major', linestyle='--', alpha=0.3)
        ax.set_title("–ì–ª—é–∫–æ–∑–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format="png")
        plt.close()
        buf.seek(0)
        return buf

    @loader.command()
    async def glucose(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)"""
        try:
            data = await self._fetch_data(12)
            if not data:
                await utils.answer(message, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
                return

            entry = data[0]
            sgv = self._convert_units(entry["sgv"])
            units = self._format_units()
            direction = self._trend_emoji(entry.get("direction", ""))
            device = entry.get("device", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            date = datetime.fromtimestamp(entry["date"] / 1000)
            time_str = date.strftime('%H:%M:%S')
            ago = (datetime.now() - date).seconds // 60

            raw = entry.get("unfiltered", None)
            noise = entry.get("noise", None)
            delta = entry.get("delta", None)

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ
            status = "üü¢ –ù–æ—Ä–º–∞"
            if self.config["units"].lower() == "mmol/l":
                if sgv < 4:
                    status = "üî¥ –ì–∏–ø–æ"
                elif sgv > 10:
                    status = "üü° –ì–∏–ø–µ—Ä"
            else:
                if sgv < 70:
                    status = "üî¥ –ì–∏–ø–æ"
                elif sgv > 180:
                    status = "üü° –ì–∏–ø–µ—Ä"

            info = (
                f"ü©∏ <b>–ì–ª—é–∫–æ–∑–∞:</b> <code>{sgv} {units}</code> {direction}\n"
                f"{status}\n"
                f"üïí –í—Ä–µ–º—è: <code>{time_str}</code> ({ago} –º–∏–Ω –Ω–∞–∑–∞–¥)\n"
                f"üì° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <code>{device}</code>\n"
            )

            if self.config["show_graph"]:
                buf = self._draw_graph(data)
                await message.client.send_file(message.chat_id, buf, caption=info, reply_to=message.id)
            else:
                await utils.answer(message, info)

        except Exception as e:
            await utils.answer(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
